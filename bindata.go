// Code generated by go-bindata.
// sources:
// files/json.schema
// files/templates/build-unit.tmpl
// files/templates/run-unit.tmpl
// DO NOT EDIT!

package maestro

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesJsonSchema = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xcb\x6e\x83\x30\x10\xbc\xf3\x15\xc8\xed\x91\xc4\x39\xf4\x94\x5f\xa9\x7a\x70\x61\x4b\x1c\xc9\x8f\xae\xb7\x87\xa8\xe2\xdf\x6b\x63\x08\x26\xe1\x91\x46\x70\x48\xd8\xd9\x9d\xd9\x61\x2c\xf9\x37\xcb\x73\xf6\xea\xca\x13\x28\xc1\x8e\x39\x3b\x11\xd9\x23\xe7\x67\x67\xf4\x2e\xa2\x7b\x83\x35\xaf\x50\x7c\xd1\xee\xf0\xc6\x23\xf6\xc2\x8a\xc0\x93\x55\x42\x51\x02\x1c\xa1\xd9\x4b\x13\x9b\x74\xb1\x10\xda\xe6\xf3\x0c\x25\x45\xcc\xa2\xb1\x80\x24\xc1\xf9\x4e\x58\xed\x31\x61\xed\xb5\x98\xd7\xe4\x61\xac\xe8\x87\x7a\x6d\xdf\x94\xba\x66\x2d\xdc\xc4\xae\xc7\x44\x9d\xe8\x2f\x48\x76\x93\x77\xaa\x02\x51\x5c\x06\x58\x12\xa8\x54\x6f\x55\x91\x1f\xae\xe4\xe9\x1c\xba\xce\x44\x1a\x5d\x47\x0b\x05\x37\xd8\x03\x5b\x79\x4b\x2b\xc6\xa4\xa9\xa8\xe2\xd3\xa4\x93\xac\x34\xca\x1a\x0d\x9a\x6e\xcd\x3c\xb2\x38\x21\xcf\xac\x1f\x67\x3a\x9b\xec\xff\x17\x8e\xc2\x5e\x8b\x7c\x2d\xf8\xa5\xf8\x9f\xb1\x36\x75\x22\xab\xe7\x12\x9f\xe6\x9e\xc5\x1c\x96\xdb\xd8\x0a\x42\x9b\xb9\x2a\x55\xb5\x8d\xab\x20\xf4\x9c\xab\x6c\xa9\x4e\xab\xe1\xbd\x7f\x8b\xff\xe1\xb7\xfd\x36\x86\xf0\xfd\x23\x11\x82\xf1\xf7\xe1\x82\x1a\xdf\x2d\xbe\xf8\xc8\x9a\xec\x2f\x00\x00\xff\xff\x15\x55\xda\x24\x3c\x05\x00\x00")

func filesJsonSchemaBytes() ([]byte, error) {
	return bindataRead(
		_filesJsonSchema,
		"files/json.schema",
	)
}

func filesJsonSchema() (*asset, error) {
	bytes, err := filesJsonSchemaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/json.schema", size: 1340, mode: os.FileMode(420), modTime: time.Unix(1436725230, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _filesTemplatesBuildUnitTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\xcd\x6e\x32\x21\x14\x86\xf7\x5c\x05\x71\xe1\x6e\xe4\xbb\x01\x16\xfa\xd5\x34\x5d\xb4\x69\x3a\x36\x5d\x18\x17\xc8\x1c\xf5\x44\x06\x28\x1c\x8c\xc6\xcc\xbd\x17\x1c\x7f\xd2\xb8\xad\xab\x39\xc3\x84\xf7\x79\x1f\x98\xf9\xa7\x45\x5a\xb0\x27\x88\x3a\xa0\x27\x74\x56\xbe\x2a\x88\x14\x1c\xff\xef\x2c\x29\xb4\x10\xf8\x24\xa1\x69\xf2\x73\xe5\x02\x3f\x1e\x47\x65\xcb\x9b\x6a\xa1\xeb\xd8\x78\x45\x10\x64\xe3\xf4\x16\xc2\x28\x42\xd8\xa1\x86\xf3\xe2\x0e\x9d\x41\xeb\xae\xab\x1f\xf0\x9d\x30\x40\xbc\xfb\xc0\xe6\x75\x3f\x2d\xd8\x0c\x5b\x70\x89\x6a\x52\x81\x6a\xd0\xf2\x1f\x9b\x1d\x3c\x48\x67\x21\x6e\x1c\xe5\x88\x36\x17\x3a\xc5\x4f\xf7\x48\x72\xa5\x4c\x04\x36\xdd\x83\x3e\xed\x78\x0f\x20\x45\x8a\x41\x2c\xd1\x8a\x76\xdb\x60\xe0\x95\xe7\xc2\x79\x12\x6d\xef\x24\xf4\xc5\x29\x8a\x22\x92\x2b\xd8\x93\x48\x79\xcb\x19\xeb\xf3\x38\xf6\xbe\x1f\xce\x9a\xbf\x10\xd5\x95\xb1\x46\xe2\xda\xe4\x76\xe5\x54\x9e\x91\xea\xa0\xbb\xee\x11\xc0\x02\x5b\xaa\xb8\xe1\x95\xe6\x03\xdd\xfc\x05\x82\x0f\x87\xbc\xf4\xf7\xc9\x98\xc1\x8d\x77\x3b\xc0\xfe\x52\xf9\xb2\xdc\x3d\xaf\xa8\x28\x3e\xc2\xcf\xc5\x7b\xa6\x4f\x59\xf5\xc2\xcb\xff\xc7\x8b\x8d\xa4\x8c\x59\xb0\x2f\x65\x09\x9a\xc9\x41\xb6\xc9\x10\x56\x29\xe3\x46\x39\x65\x0d\xc4\x7e\x02\x00\x00\xff\xff\x43\x9f\x9c\xc2\xc9\x02\x00\x00")

func filesTemplatesBuildUnitTmplBytes() ([]byte, error) {
	return bindataRead(
		_filesTemplatesBuildUnitTmpl,
		"files/templates/build-unit.tmpl",
	)
}

func filesTemplatesBuildUnitTmpl() (*asset, error) {
	bytes, err := filesTemplatesBuildUnitTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/templates/build-unit.tmpl", size: 713, mode: os.FileMode(420), modTime: time.Unix(1437744481, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _filesTemplatesRunUnitTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcb\x8e\xda\x3c\x14\xde\xe7\x29\xbc\x61\xf3\xeb\x4f\xe8\x0b\x58\x6a\x20\x66\x06\x09\x92\x88\x40\x5b\x89\xa2\xca\x84\x03\xb5\x70\xec\xd4\x76\x10\x55\x94\x77\xaf\x9d\x10\x86\xcb\x8c\xaa\xae\xc0\xdf\xc5\xfe\xce\xc9\xb1\xd7\x2b\xc1\xcc\xc6\x8b\x40\xe7\x8a\x95\x86\x49\x81\xe7\x14\xb4\x51\x12\x8d\x65\x51\x4a\x01\xc2\xa0\xba\x0e\x9c\x2c\xa6\x05\x34\xcd\x80\xd5\x35\xdb\xa3\x20\xcb\x29\xa7\x5b\x6e\x91\xff\x51\x41\xcf\x48\xdb\x35\x38\xa9\x23\x2c\x5a\xd7\x20\x76\x4d\xe3\x85\x7b\x03\x0a\xef\x64\x7e\x04\x15\x68\x50\x27\x96\xc3\x05\x3c\x31\xc9\x99\x90\x57\x74\x01\xbf\x2a\xa6\x40\x3f\x11\xde\x3a\xeb\xfe\x6d\xbc\x25\x2b\x40\x56\x26\x33\x54\x99\x0c\x72\xfc\xc9\xeb\xe2\x7c\x91\xbc\x2a\x40\x37\x0d\x39\x43\xde\xb2\xa9\x02\xec\x0f\x2b\xad\x86\x5b\x26\x86\xc5\x71\xc7\x14\xf2\x4b\x97\xf0\xa2\x8d\x98\x7a\x8b\xf9\x81\xad\xcb\x8d\x8e\x8c\x73\xe7\x1c\x4b\x61\x28\x13\xa0\xba\x5e\xfc\xc5\xa5\x8a\x7f\xf7\x94\x55\x77\x52\xa6\xf2\x5b\x2d\x7e\xda\xbb\x12\xa8\xad\x5c\x48\x83\x82\xc8\x9e\xb1\x28\x12\x41\xce\xcc\x34\x8d\xef\xb7\x27\xb7\x85\xf9\xbe\xb0\xc7\xbe\x93\xc3\x42\x8a\x8a\x03\xa0\x20\x95\xca\x68\xa7\x84\x73\x29\x75\xab\x6d\xe9\xd6\x7f\x55\x5d\x1b\xec\x9f\x3e\x50\x10\x71\xb2\xec\x83\x1f\x7d\xf7\x2c\x34\x0f\x49\xb6\x5c\x24\x3f\xe2\x24\x22\x78\xf0\x8a\x6e\xa0\x55\x46\x16\x71\x38\x27\xd8\x4d\x99\xfd\xe0\xa2\x4b\x77\xa3\xc8\x96\xe1\x4b\x4b\xdb\x4e\x1c\x1e\xb8\x30\x4d\x1d\x13\x96\xe5\x3d\x3e\x4e\xe6\x69\x12\x93\x78\xe9\xd8\xf8\x69\xcb\x69\x84\x07\xec\x3e\xda\x64\x91\xc4\x4b\x12\x47\xb8\x9b\xa7\x89\xb2\xed\xba\xd4\x77\xb7\xe8\xaa\xba\x31\xa6\xab\xd1\x6c\x9a\xbd\x92\xde\x99\x56\x5b\xce\xf4\x4f\xe8\xac\x77\xab\x27\x6f\x36\x0e\x67\xe1\x68\x46\xf0\xe3\x9d\xba\xdc\xa3\x7e\xd1\xb7\xb2\x1f\x8c\xf6\x7b\x16\x6f\x73\x2b\xcb\xa7\x01\xd1\x16\x7c\x6f\xfc\xbc\xf5\x54\x68\x43\x39\xdf\x78\x5f\xa9\xad\x6a\x37\xfa\x8d\x8b\x8a\x1b\xe6\x57\xb6\xfb\x81\x1d\xb6\x03\x18\xab\xfa\xe6\x4f\x38\x80\x7d\x1b\x2e\xd1\x98\x38\xb8\x2c\x76\xbb\x3d\x67\xb9\xd1\xf8\xee\x55\xf8\xfc\x5f\x7f\x59\x6d\x58\x6e\x87\xc8\x79\x5e\xb8\xdc\x52\xde\x34\xdd\x2f\x36\xaa\x82\xfe\xba\xfd\x09\x00\x00\xff\xff\x0b\x8a\x3b\x31\x78\x04\x00\x00")

func filesTemplatesRunUnitTmplBytes() ([]byte, error) {
	return bindataRead(
		_filesTemplatesRunUnitTmpl,
		"files/templates/run-unit.tmpl",
	)
}

func filesTemplatesRunUnitTmpl() (*asset, error) {
	bytes, err := filesTemplatesRunUnitTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/templates/run-unit.tmpl", size: 1144, mode: os.FileMode(420), modTime: time.Unix(1437695891, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/json.schema": filesJsonSchema,
	"files/templates/build-unit.tmpl": filesTemplatesBuildUnitTmpl,
	"files/templates/run-unit.tmpl": filesTemplatesRunUnitTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"json.schema": &bintree{filesJsonSchema, map[string]*bintree{
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"build-unit.tmpl": &bintree{filesTemplatesBuildUnitTmpl, map[string]*bintree{
			}},
			"run-unit.tmpl": &bintree{filesTemplatesRunUnitTmpl, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

